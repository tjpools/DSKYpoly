#!/bin/bash
# DSKYpoly Cross-Platform Sync Script
# Optimized for Fedora ‚Üí Windows/WSL ‚Üí iPhone workflow

echo "üîÑ DSKYpoly Cross-Platform Sync"
echo "==============================="
echo ""

# Function to detect current environment
detect_environment() {
    if [ -f /etc/fedora-release ]; then
        echo "fedora"
    elif grep -q Microsoft /proc/version 2>/dev/null; then
        echo "wsl"
    elif [ "$(uname)" = "Linux" ]; then
        echo "linux"
    elif [ "$(uname)" = "Darwin" ]; then
        echo "macos"
    else
        echo "unknown"
    fi
}

ENV=$(detect_environment)
echo "üñ•Ô∏è  Detected environment: $ENV"
echo ""

case $ENV in
    "fedora")
        echo "üî¥ Fedora Development Workflow"
        echo "=============================="
        echo ""
        
        # Show current status
        echo "üìä Current Status:"
        git status --short
        echo ""
        
        # Show active branches
        echo "üåø Branches:"
        git branch -v
        echo ""
        
        # Offer sync options
        echo "üöÄ Sync Options:"
        echo "1. Push current work to remote"
        echo "2. Create mobile-friendly commit"
        echo "3. Prepare for Windows/WSL testing"
        echo "4. Show recent changes for iPhone monitoring"
        echo "5. Diagnose git/remote issues"
        echo "6. Configure git for Windows (fix vim editor)"
        echo ""
        
        read -p "Choose option (1-6): " choice
        
        case $choice in
            1)
                echo "Pushing current branch..."
                current_branch=$(git branch --show-current)
                
                # Check if we need to pull first
                git fetch origin
                
                # Check if remote is ahead
                LOCAL=$(git rev-parse @)
                REMOTE=$(git rev-parse @{u} 2>/dev/null)
                BASE=$(git merge-base @ @{u} 2>/dev/null)
                
                if [ "$LOCAL" = "$REMOTE" ]; then
                    echo "üìç Branch is up-to-date"
                elif [ "$LOCAL" = "$BASE" ]; then
                    echo "‚ö†Ô∏è  Remote is ahead. Pulling first..."
                    git pull origin "$current_branch"
                elif [ "$REMOTE" = "$BASE" ]; then
                    echo "üöÄ Local is ahead. Pushing..."
                else
                    echo "‚ö†Ô∏è  Branches have diverged. Manual merge may be required."
                    echo "Run: git pull origin $current_branch"
                    exit 1
                fi
                
                # Attempt push with error handling
                if git push origin "$current_branch"; then
                    echo "‚úÖ Successfully pushed to origin/$current_branch"
                else
                    echo "‚ùå Push failed. Common solutions:"
                    echo "1. Check internet connection"
                    echo "2. Verify GitHub authentication (token/SSH)"
                    echo "3. Try: git pull origin $current_branch && git push origin $current_branch"
                    echo "4. Check if branch exists on remote: git ls-remote origin"
                fi
                ;;
            2)
                echo "Creating mobile-friendly commit..."
                git add -A
                echo "Enter commit message:"
                read -r commit_msg
                git commit -m "üì± $commit_msg

Mobile-friendly update for iPhone monitoring
Cross-platform compatibility ensured"
                echo "‚úÖ Commit created"
                ;;
            3)
                echo "Preparing for Windows/WSL..."
                
                # Push with error handling
                branches_to_push=("quintic-hypergeometric" "reverse-engineering-analysis")
                for branch in "${branches_to_push[@]}"; do
                    echo "üì§ Pushing $branch..."
                    if git push origin "$branch"; then
                        echo "‚úÖ $branch pushed successfully"
                    else
                        echo "‚ùå Failed to push $branch"
                        echo "üí° Try manually: git push origin $branch"
                    fi
                done
                
                echo ""
                echo "üìù Windows/WSL Commands:"
                echo "git pull origin quintic-hypergeometric"
                echo "conda env create -f environment.yml"
                echo "conda activate dskypoly"
                echo "jupyter lab notebooks/quintic_exploration.ipynb"
                ;;
            4)
                echo "üì± Recent changes (iPhone-friendly):"
                git log --oneline -10
                echo ""
                echo "üìä Modified files:"
                git diff --name-only HEAD~5..HEAD
                ;;
            5)
                echo "üîç Git/Remote Diagnostics"
                echo "========================="
                echo ""
                echo "üì° Remote configuration:"
                git remote -v
                echo ""
                echo "üåê Remote branch status:"
                git ls-remote origin
                echo ""
                echo "üìä Local vs Remote comparison:"
                git fetch origin
                for branch in $(git branch -r | grep -v HEAD | sed 's/origin\///'); do
                    echo "Branch: $branch"
                    LOCAL=$(git rev-parse "$branch" 2>/dev/null || echo "local-missing")
                    REMOTE=$(git rev-parse "origin/$branch" 2>/dev/null || echo "remote-missing")
                    if [ "$LOCAL" = "$REMOTE" ]; then
                        echo "  ‚úÖ In sync"
                    else
                        echo "  ‚ö†Ô∏è  Out of sync"
                    fi
                done
                echo ""
                echo "üîë Authentication test:"
                if git ls-remote origin > /dev/null 2>&1; then
                    echo "‚úÖ Can connect to remote repository"
                else
                    echo "‚ùå Cannot connect to remote repository"
                    echo "üí° Check:"
                    echo "  - Internet connection"
                    echo "  - GitHub authentication (token/SSH key)"
                    echo "  - Repository URL: $(git remote get-url origin)"
                fi
                ;;
            6)
                echo "üîß Git Configuration for Windows"
                echo "================================"
                echo ""
                echo "This will configure Git to work better on Windows:"
                echo "- Use Notepad instead of vim for commit messages"
                echo "- Set up proper line ending handling"
                echo "- Configure pull strategy"
                echo ""
                read -p "Apply Windows git configuration? (y/n): " apply_config
                
                if [ "$apply_config" = "y" ] || [ "$apply_config" = "Y" ]; then
                    echo "üîß Applying Windows-friendly git configuration..."
                    
                    # Editor configuration
                    git config --global core.editor notepad
                    echo "‚úÖ Set editor to Notepad"
                    
                    # Windows-specific settings
                    git config --global core.autocrlf true
                    echo "‚úÖ Configured line ending handling"
                    
                    git config --global core.filemode false
                    echo "‚úÖ Disabled file permission tracking"
                    
                    # Pull strategy
                    git config --global pull.rebase false
                    echo "‚úÖ Set pull strategy to merge"
                    
                    echo ""
                    echo "üéâ Git configured for Windows!"
                    echo "üí° No more vim editor during git pulls"
                    echo "üí° See WINDOWS_GIT.md for more details"
                else
                    echo "‚ÑπÔ∏è  Configuration skipped"
                    echo "üí° See WINDOWS_GIT.md for manual setup"
                fi
                ;;
        esac
        ;;
        
    "wsl"|"linux")
        echo "ü™ü Windows/WSL Workflow"
        echo "======================="
        echo ""
        
        # Check if conda is available
        if command -v conda >/dev/null 2>&1; then
            echo "üêç Conda available"
            
            # Check if dskypoly environment exists
            if conda env list | grep -q dskypoly; then
                echo "‚úÖ DSKYpoly environment ready"
                echo ""
                echo "üöÄ Launch Options:"
                echo "1. Activate conda environment (terminal)"
                echo "2. Use Anaconda Navigator (GUI)"
                echo ""
                echo "üì± Terminal Activation:"
                echo "   conda activate dskypoly"
                echo "   jupyter lab"
                echo ""
                echo "üñ±Ô∏è  Anaconda Navigator:"
                echo "   1. Open Anaconda Navigator"
                echo "   2. Select 'dskypoly' environment"
                echo "   3. Launch JupyterLab or Spyder"
                echo "   4. Navigate to DSKYpoly project folder"
                echo "   5. Open notebooks/quintic_exploration.ipynb"
            else
                echo "üì¶ Setting up DSKYpoly environment..."
                if [ -f environment.yml ]; then
                    echo "üîß Creating environment..."
                    conda env create -f environment.yml
                    echo "‚úÖ Environment created"
                    echo ""
                    echo "üéØ Next Steps:"
                    echo "1. Open Anaconda Navigator"
                    echo "2. Select 'dskypoly' environment from dropdown"
                    echo "3. Launch JupyterLab for mathematical exploration"
                    echo "4. Launch Spyder for Python development"
                else
                    echo "‚ùå environment.yml not found. Please pull latest changes."
                fi
            fi
        else
            echo "‚ö†Ô∏è  Conda not found. Please install Anaconda/Miniconda"
            echo ""
            echo "üñ±Ô∏è  Using Anaconda Navigator:"
            echo "1. Download DSKYpoly project files"
            echo "2. Open Anaconda Navigator"
            echo "3. Go to Environments ‚Üí Import"
            echo "4. Select environment.yml file"
            echo "5. Launch JupyterLab or Spyder"
        fi
        
        echo ""
        echo "üîÑ Pull latest changes:"
        echo "üí° Note: If vim editor opens, type ':wq' to finish"
        echo "üí° To fix this permanently: git config --global core.editor notepad"
        echo "üí° See WINDOWS_GIT.md for complete Windows git setup"
        echo ""
        echo "üì• Pulling quintic-hypergeometric branch..."
        if git pull origin quintic-hypergeometric; then
            echo "‚úÖ quintic-hypergeometric updated"
        else
            echo "‚ö†Ô∏è  Issue pulling quintic-hypergeometric"
        fi
        echo ""
        echo "üì• Pulling reverse-engineering-analysis branch..."
        if git pull origin reverse-engineering-analysis; then
            echo "‚úÖ reverse-engineering-analysis updated"
        else
            echo "‚ö†Ô∏è  Issue pulling reverse-engineering-analysis"
        fi
        ;;
        
    *)
        echo "üåê General Cross-Platform Info"
        echo "==============================="
        echo ""
        echo "üì± For iPhone monitoring:"
        echo "- Check MOBILE.md for quick overview"
        echo "- Use git log --oneline for recent changes"
        echo "- Monitor branch status with git branch -v"
        echo ""
        echo "üíª For development environments:"
        echo "- Fedora: Primary development"
        echo "- Windows/WSL: Testing and Anaconda exploration"
        echo "- Mobile: Monitoring and documentation reading"
        ;;
esac

echo ""
echo "üìö Quick Reference:"
echo "- üì± Mobile docs: MOBILE.md"
echo "- üêç Anaconda setup: ANACONDA.md" 
echo "- üîç RE analysis: analysis/README.md"
echo "- üìñ Main docs: README.md"
